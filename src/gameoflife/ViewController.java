package gameoflife;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.FileChooser;
import javafx.util.Duration;

public class ViewController implements Initializable {

    private int numGenerations;
    private int pCoordinateY;
    private int pCoordinateX;
    private final static int BOARD_SIZE = 50;
    private Board golBoard;
    private File selectedFile;
    private final Timeline tl = new Timeline(new KeyFrame(Duration.millis(1000), event -> {
        createNextgen();
    }));    
    private String rule = "23/3";
    private ArrayList<Integer> numsSurvival;
    private ArrayList<Integer> numsBirth;

    @FXML
    private GridPane golPane;
    @FXML
    private Button nextGenButton;
    @FXML
    private Label numGenLabel;
    @FXML
    private Button autogeneratedButton;
    @FXML
    private Button openFileButton;
    @FXML
    private Button stopButton;

    @FXML
    private void handleAutogeneratedButton(ActionEvent event) {
        tl.setCycleCount(Animation.INDEFINITE);
        tl.play();
    }

    @FXML
    private void handleStopButton(ActionEvent event) {
        tl.stop();
    }

    @FXML
    private void handleOpenFileButton(ActionEvent event) {
        golBoard = new Board(BOARD_SIZE);
        openFile();
        numGenerations = 0;
        numGenLabel.setText(String.valueOf(numGenerations));
    }

    @FXML
    private void handleNextGenButton(ActionEvent event) {
        createNextgen();
    }

    private void createNextgen() {
        changeBoard();
        drawBoard();
        numGenerations++;
        numGenLabel.setText(String.valueOf(numGenerations));
    }
    
    private void openFile() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Lif Files", "*.lif"),
                new FileChooser.ExtensionFilter("Life Files", "*.life")
        );
        selectedFile = fileChooser.showOpenDialog(GameOfLife.stage);

        ArrayList<Integer> pList = new ArrayList<>();
        ArrayList<String> lifFileLineList = new ArrayList<>();
        int dCounter = 0;
        int simpleCounter = 0;
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(selectedFile));
            String line;
            while ((line = br.readLine()) != null) {
                lifFileLineList.add(line);
                if (line.startsWith("#D")) {
                    dCounter++;
                }
                if (line.startsWith("#P")) {
                    pList.add(simpleCounter);
                }
                simpleCounter++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        if (lifFileLineList.get(0).equals("#Life 1.05")) {
            for (int i = 0; i < pList.size(); i++) {
                int firstSpace = lifFileLineList.get(pList.get(i)).indexOf(" ");
                int lastSpace = lifFileLineList.get(pList.get(i)).lastIndexOf(" ");
                pCoordinateX = Integer.parseInt(lifFileLineList.get(pList.get(i)).substring(firstSpace + 1, lastSpace));
                pCoordinateY = (Integer.parseInt(lifFileLineList.get(pList.get(i)).substring(lastSpace + 1))) * -1;
                pCoordinateX += BOARD_SIZE / 2;
                pCoordinateY += BOARD_SIZE / 2;
                if (i < pList.size() - 1) {
                    int jCounter = 0;
                    for (int j = pList.get(i) + 1; j < pList.get(i + 1); j++) {
                        for (int k = 0; k < lifFileLineList.get(j).length(); k++) {
                            char c = lifFileLineList.get(j).charAt(k);
                            if (c == '*') {
                                golBoard.setCell(pCoordinateY + jCounter, pCoordinateX + k, true);
                            } else {
                                golBoard.setCell(pCoordinateY + jCounter, pCoordinateX + k, false);
                            }
                        }
                        jCounter++;
                    }
                } else {
                    int jCounter = 0;
                    for (int j = pList.get(pList.size() - 1) + 1; j < lifFileLineList.size(); j++) {
                        for (int k = 0; k < lifFileLineList.get(j).length(); k++) {
                            char c = lifFileLineList.get(j).charAt(k);
                            if (c == '*') {
                                golBoard.setCell(pCoordinateY + jCounter, pCoordinateX + k, true);
                            } else {
                                golBoard.setCell(pCoordinateY + jCounter, pCoordinateX + k, false);
                            }
                        }
                        jCounter++;
                    }
                }
            }
            if (!(lifFileLineList.get(dCounter + 1).equals("#N") || lifFileLineList.get(dCounter + 1).startsWith("P"))) {
                rule = lifFileLineList.get(dCounter + 1).substring(3);
            }
        } else if (lifFileLineList.get(0).equals("#Life 1.06")) {
            for (int i = 1; i < lifFileLineList.size(); i++) {
                int space = lifFileLineList.get(i).indexOf(" ");
                pCoordinateX = Integer.parseInt(lifFileLineList.get(i).substring(0, space));
                pCoordinateY = (Integer.parseInt(lifFileLineList.get(i).substring(space + 1))) * -1;
                pCoordinateX += BOARD_SIZE / 2;
                pCoordinateY += BOARD_SIZE / 2;
                golBoard.setCell(pCoordinateY, pCoordinateX, true);
            }
        } else {
            System.out.println("Not supported file type. Please try Life 1.05. or 1.06.");
        }
        handleRule();
        drawBoard();
    }

    private void handleRule() {
        numsSurvival = new ArrayList<>();
        numsBirth = new ArrayList<>();
        int slashIndex = rule.indexOf("/");
        for (int i = 0; i < slashIndex; i++) {
            numsSurvival.add(Character.getNumericValue(rule.charAt(i)));
        }
        for (int i = slashIndex + 1; i < rule.length(); i++) {
            numsBirth.add(Character.getNumericValue(rule.charAt(i)));
        }
    }

    private void changeBoard(){
        Board nextGenBoard = new Board(BOARD_SIZE);
        for (int y = 0; y < BOARD_SIZE; y++) {
            for (int x = 0; x < BOARD_SIZE; x++) {
                boolean cellIsAlive = golBoard.getCell(y, x).hasState();
                boolean neighboursToSurvive = numsSurvival.contains(countAliveNeighbours(y, x));
                boolean neighboursToBeReborn = numsBirth.contains(countAliveNeighbours(y, x));
                if (((cellIsAlive) && (neighboursToSurvive)) || ((!cellIsAlive) && (neighboursToBeReborn))) {
                    nextGenBoard.setCell(y, x, true);
                } else {
                    nextGenBoard.setCell(y, x, false);
                }
            }
        }
        golBoard = nextGenBoard;
    }
    
    public int countAliveNeighbours(int y, int x) {
        int numAliveCells = 0;
        for (int i = y - 1; i <= y + 1; i++) {
            for (int j = x - 1; j <= x + 1; j++) {
                if (i >= 0 && i < BOARD_SIZE && j >= 0 && j < BOARD_SIZE && golBoard.getCell(i, j).hasState()) {
                    numAliveCells++;
                }
            }
        }
        if (golBoard.getCell(y, x).hasState()) {
            numAliveCells--;
        }
        return numAliveCells;
    }
    
    private void drawBoard() {
        for (int y = 0; y < golBoard.getSize(); y++) {
            for (int x = 0; x < golBoard.getSize(); x++) {
                if (golBoard.getCell(y, x).hasState()) {
                    Rectangle r = new Rectangle(600/BOARD_SIZE, 600/BOARD_SIZE, new Color(0, 0, 0, 1));
                    golPane.add(r, x, y);
                } else {
                    Rectangle r = new Rectangle(600/BOARD_SIZE, 600/BOARD_SIZE, new Color(1, 1, 1, 1));
                    golPane.add(r, x, y);
                }
            }
        }
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
    }
}
